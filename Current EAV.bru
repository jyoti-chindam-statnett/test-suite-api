meta {
  name: Current EAV
  type: http
  seq: 2
}

get {
  url: http://elhservices1-test9.elhub.cloud:8088/metering-values/v1/metering-points/902266200000000074/estimated-annual-volumes/current?direction=OUT
  body: xml
  auth: basic
}

params:query {
  direction: OUT
}

headers {
  Elhub-OrganizationNo: 915925529
  Elhub-PartyId: 7080003824349
  Elhub-PartyTypeCode: DomainOwner
  Elhub-InternalId: f5afed6a-79c6-961a-e053-04058d0a22f9
  Content-Type: application/json
  Elhub-RoleType: ElhubOperatorUserRole
  Elhub-RoleCodeList: DO_001_NO
  Elhub-AuthorizationType: ElhubUserRole
}

auth:basic {
  username: {{API_USERNAME}}
  password: {{API_PASSWORD}}
}

tests {
  test("should return a status of 200", function() {
    const data = res.getBody();
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should have a valid data structure", function() {
    const data = res.getBody();
    expect(data).to.have.property('data').that.is.an('array');
    expect(data.data[0]).to.have.property('type', 'estimated-annual-volumes');
    expect(data.data[0]).to.have.property('id').that.is.a('string');
  });
  
  test("should have valid attributes", function() {
    const attributes = res.getBody().data[0].attributes;
    expect(attributes).to.have.property('id').that.is.a('string');
    expect(attributes).to.have.property('direction', 'OUT');
    expect(attributes).to.have.property('volume').that.is.a('number');
    expect(attributes.volume).to.be.above(0);
    expect(attributes).to.have.property('calculationMethod', 'MANUAL');
    expect(attributes).to.have.property('quality', 'OK');
    expect(attributes).to.have.property('startDate', '2024-12-18');
    expect(attributes).to.have.property('active', true);
  });
  
  test("should have valid relationships", function() {
    const relationships = res.getBody().data[0].relationships;
    expect(relationships).to.have.property('meteringPoint');
    expect(relationships.meteringPoint).to.have.property('type', 'metering-points');
    expect(relationships.meteringPoint).to.have.property('id', '902266200000000074');
  });
  
  test("should have valid links", function() {
    const links = res.getBody().data[0].links;
    expect(links).to.have.property('self').that.is.a('string');
    expect(links.self).to.include('/metering-values/v1/metering-points/');
  });
  
  test("should have top-level links", function() {
    const links = res.getBody().links;
    expect(links).to.have.property('self').that.is.a('string');
    expect(links.self).to.include('/metering-values/v1/metering-points/');
  });
  
}
